/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return build(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }

    TreeNode* build(vector<int>& inorder, int instart, int inend, vector<int>& postorder, int poststart, int postend)
    {
        if (instart > inend || poststart > postend)
            return nullptr;
        int rootval = postorder[postend];
        int index = 0;
        for (int i = instart; i <= inend; i++)
        {
            if (inorder[i] == rootval)
            {
                index = i;
                break;
            }
        }
        int leftsize = index - instart;
        TreeNode* tn = new TreeNode(rootval);
        tn->left = build(inorder, instart, index-1, postorder, poststart, poststart+leftsize-1);
        tn->right = build(inorder, index+1, inend, postorder, poststart+leftsize, postend-1);
        return tn;
    }
};
