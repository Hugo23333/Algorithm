/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        return sb.toString();
    }

    void serialize(TreeNode root, StringBuilder sb)
    {
        if (root == null)
        {
            sb.append("null").append(",");
              return;
        }
        sb.append(root.val).append(","); 
        serialize(root.left, sb);
        serialize(root.right, sb);        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        LinkedList<String> node = new LinkedList<>();
        for(String s : data.split(","))
            node.addLast(s);
        return deserialize(node);
    }

    TreeNode deserialize(LinkedList<String> node)
    {
        if (node.isEmpty())
            return null;
        String first = node.removeFirst();
        if (first.equals("null"))
            return null;
        TreeNode root = new TreeNode(Integer.parseInt(first));
        root.left = deserialize(node);
        root.right = deserialize(node);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
